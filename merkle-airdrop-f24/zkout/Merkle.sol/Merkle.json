{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"Merkle.sol:Merkle\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[11]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@calldatasize]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.gt\t@.BB0_9\n\tsub.s!\t@CPI0_6[0], r2, r5\n\tjump.eq\t@.BB0_12\n\tsub.s!\t@CPI0_7[0], r2, r5\n\tjump.eq\t@.BB0_60\n\tsub.s!\t@CPI0_8[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_11[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r2\n\tptr.add\tr1, r2, r2\n\tld\tr2, r7\n\tsub.s!\t@CPI0_11[0], r7, r2\n\tjump.gt\t@.BB0_17\n\tshl.s\t5, r7, r6\n\tadd\t63, r6, r2\n\tand\t@CPI0_12[0], r2, r2\n\tsub.s!\t@CPI0_13[0], r2, r8\n\tjump.gt\t@.BB0_17\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tst.1\t128, r7\n\tadd\t36, r5, r5\n\tadd\tr6, r5, r6\n\tsub!\tr6, r3, r8\n\tjump.gt\t@.BB0_2\n\tsub!\tr7, r0, r7\n\tjump.eq\t@.BB0_90\n.BB0_87:\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tadd\t32, r4, r4\n\tst.1\tr4, r2\n\tadd\t32, r5, r5\n\tsub!\tr5, r6, r2\n\tjump.lt\t@.BB0_87\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r8\n\tld.1\t128, r4\n\tsub.s!\t1, r4, r2\n\tjump.gt\t@.BB0_91\n\tld.1\t64, r2\n.BB0_90:\n\tadd\t100, r2, r1\n\tadd\t@CPI0_18[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t68, r2, r1\n\tadd\t@CPI0_19[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t36, r2, r1\n\tadd\t36, r0, r3\n\tjump\t@.BB0_28\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_9:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_142\n\tsub.s!\t@CPI0_4[0], r2, r4\n\tjump.eq\t@.BB0_145\n\tsub.s!\t@CPI0_5[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_153\n\tadd\tr1, r0, r3\n\tadd\tr0, r0, r2\n.BB0_152:\n\tadd\t1, r2, r2\n\tsub.s!\t1, r3, r4\n\tshr.s\t1, r3, r3\n\tjump.gt\t@.BB0_152\n.BB0_153:\n\tsub.s\t1, r1, r3\n\tand!\tr1, r3, r1\n\tsub.s.eq\t1, r2, r2\n\tst.1\t128, r2\n\tadd\t@CPI0_9[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_11[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r2\n\tptr.add\tr1, r2, r2\n\tld\tr2, r6\n\tsub.s!\t@CPI0_22[0], r6, r2\n\tjump.ge\t@.BB0_17\n\tshl.s\t5, r6, r5\n\tadd\t63, r5, r2\n\tand\t@CPI0_12[0], r2, r2\n\tsub.s!\t@CPI0_13[0], r2, r7\n\tjump.gt\t@.BB0_17\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tst.1\t128, r6\n\tadd\t36, r4, r4\n\tadd\tr5, r4, r5\n\tsub!\tr5, r3, r3\n\tjump.gt\t@.BB0_2\n\tsub!\tr6, r0, r3\n\tjump.eq\t@.BB0_27\n\tadd\t128, r0, r2\n.BB0_23:\n\tptr.add\tr1, r4, r3\n\tld\tr3, r3\n\tadd\t32, r2, r2\n\tst.1\tr2, r3\n\tadd\t32, r4, r4\n\tsub!\tr4, r5, r3\n\tjump.lt\t@.BB0_23\n\tld.1\t128, r1\n\tsub.s!\t2, r1, r2\n\tjump.ge\t@.BB0_25\n\tld.1\t64, r2\n.BB0_27:\n\tadd\t100, r2, r1\n\tadd\t@CPI0_25[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t68, r2, r1\n\tadd\t@CPI0_26[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t36, r2, r1\n\tadd\t35, r0, r3\n.BB0_28:\n\tst.1\tr1, r3\n\tadd\t@CPI0_20[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\t32, r0, r3\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_21[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_60:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_11[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r2, r4\n\tptr.add\tr1, r4, r4\n\tld\tr4, r5\n\tsub.s!\t@CPI0_11[0], r5, r4\n\tjump.gt\t@.BB0_17\n\tshl.s\t5, r5, r4\n\tadd\t63, r4, r6\n\tand\t@CPI0_12[0], r6, r6\n\tsub.s!\t@CPI0_13[0], r6, r7\n\tjump.le\t@.BB0_66\n.BB0_17:\n\tadd\t@CPI0_23[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_24[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_142:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tnear_call\tr0, @fun_log2ceilBitMagic, @DEFAULT_UNWIND\n\tst.1\t128, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_145:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tadd\tr3, r0, r1\n\tnear_call\tr0, @fun_hashLeafPairs, @DEFAULT_UNWIND\n.BB0_32:\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_66:\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r5\n\tadd\t36, r2, r2\n\tadd\tr4, r2, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_67\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_67:\n\tsub!\tr5, r0, r3\n\tjump.ne\t@.BB0_68\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r2\n\tjump\t@.BB0_77\n.BB0_68:\n\tadd\t128, r0, r3\n.BB0_70:\n\tptr.add\tr1, r2, r5\n\tld\tr5, r5\n\tadd\t32, r3, r3\n\tst.1\tr3, r5\n\tadd\t32, r2, r2\n\tsub!\tr2, r4, r5\n\tjump.lt\t@.BB0_70\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r2\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[10]\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_77\n\tadd\t32784, r0, stack-[9]\n\tadd\tr0, r0, r3\n.BB0_73:\n\tld.1\t128, r1\n\tsub!\tr1, r3, r1\n\tjump.le\t@.BB0_30\n\tadd\tr3, r0, stack-[11]\n\tshl.s\t5, r3, r1\n\tadd\t160, r1, r1\n\tld.1\tr1, r1\n\tsub!\tr2, r1, r3\n\tadd\tr1, r0, r3\n\tadd.lt\tr2, r0, r3\n\tst.1\t0, r3\n\tadd.le\tr1, r0, r2\n\tst.1\t32, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\tstack-[9], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r2\n\tadd\tstack-[11], r0, r3\n\tadd\t1, r3, r3\n\tsub.s!\tstack-[10], r3, r1\n\tjump.lt\t@.BB0_73\n\tptr.add\tstack[@ptr_calldata], r0, r1\n.BB0_77:\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub!\tr1, r2, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tjump\t@.BB0_32\n.BB0_91:\n\tshr.s\t128, r4, r2\n\tsub.s!\t@CPI0_14[0], r4, r5\n\tadd.le\tr4, r0, r2\n\tsub.s!\t@CPI0_14[0], r4, r5\n\tadd\t0, r0, r5\n\tadd.gt\t128, r0, r5\n\tor\t64, r5, r6\n\tsub.s!\t@CPI0_11[0], r2, r7\n\tadd.le\tr5, r0, r6\n\tshr.s\t64, r2, r5\n\tsub.s!\t@CPI0_11[0], r2, r7\n\tadd.le\tr2, r0, r5\n\tor\t32, r6, r7\n\tsub.s!\t@CPI0_0[0], r5, r2\n\tadd.le\tr6, r0, r7\n\tshr.s\t32, r5, r6\n\tsub.s!\t@CPI0_0[0], r5, r2\n\tadd.le\tr5, r0, r6\n\tor\t16, r7, r2\n\tsub.s!\t65535, r6, r5\n\tadd.le\tr7, r0, r2\n\tshr.s\t16, r6, r5\n\tadd.le\tr6, r0, r5\n\tsub.s\t1, r4, r6\n\tand\tr4, r6, r4\n\tsub.s!\t255, r5, r6\n\tadd.gt\t8, r2, r2\n\tshr.s\t8, r5, r6\n\tadd.le\tr5, r0, r6\n\tsub.s!\t15, r6, r5\n\tadd.gt\t4, r2, r2\n\tshr.s\t4, r6, r5\n\tadd.le\tr6, r0, r5\n\tsub.s!\t3, r5, r6\n\tadd.gt\t2, r2, r2\n\tshr.s\t2, r5, r6\n\tadd.le\tr5, r0, r6\n\tsub.s!\t1, r6, r5\n\tadd.gt\t1, r2, r2\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_92\n\tsub!\tr2, r0, r4\n\tadd\tr0, r0, r4\n\tadd.eq\t1, r4, r2\n\tjump\t@.BB0_95\n.BB0_25:\n\tadd\t128, r0, stack-[7]\n\tadd\t160, r0, stack-[6]\n.BB0_33:\n\tshr.s\t1, r1, r3\n\tand!\t1, r1, r2\n\tjump.ne\t@.BB0_42\n\tsub.s!\t@CPI0_17[0], r1, r2\n\tjump.gt\t@.BB0_17\n\tshl.s\t5, r3, r2\n\tadd\t63, r2, r4\n\tand\t@CPI0_12[0], r4, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tadd\tr5, r0, stack-[8]\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_11[0], r4, r6\n\tjump.gt\t@.BB0_17\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_17\n\tst.1\t64, r4\n\tadd\tstack-[8], r0, r4\n\tst.1.inc\tr4, r3, r8\n\tshr.s!\t5, r2, r3\n\tjump.eq\t@.BB0_154\n\tadd\tstack[@calldatasize], r0, r4\n\tptr.add\tstack[@ptr_calldata], r4, r4\n\tadd\tr0, r0, r5\n.BB0_39:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr4, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_39\n.BB0_154:\n\tand!\t31, r2, r2\n\tjump.eq\t@.BB0_41\n.BB0_41:\n\tsub.s\t1, r1, stack-[5]\n\tjump\t@.BB0_53\n.BB0_42:\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.gt\t@.BB0_17\n\tadd\t1, r3, r3\n\tshl.s\t5, r3, r2\n\tadd\t63, r2, r4\n\tand\t@CPI0_12[0], r4, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tadd\tr5, r0, stack-[8]\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_11[0], r4, r6\n\tjump.gt\t@.BB0_17\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_17\n\tst.1\t64, r4\n\tadd\tstack-[8], r0, r4\n\tst.1.inc\tr4, r3, r8\n\tshr.s!\t5, r2, r3\n\tjump.eq\t@.BB0_155\n\tadd\tstack[@calldatasize], r0, r4\n\tptr.add\tstack[@ptr_calldata], r4, r4\n\tadd\tr0, r0, r5\n.BB0_47:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr4, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_47\n.BB0_155:\n\tand!\t31, r2, r2\n\tjump.eq\t@.BB0_49\n.BB0_49:\n\tsub.s\t1, r1, stack-[5]\n\tadd\tstack-[7], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\tstack-[5], r1, r1\n\tjump.le\t@.BB0_30\n\tadd\tr8, r0, stack-[11]\n\tadd\tstack-[5], r0, r1\n\tshl.s\t5, r1, r1\n\tadd\tstack-[6], r1, r1\n\tld.1\tr1, r1\n\tst.1\t0, r0\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r3\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_30\n\tshl.s\t5, r2, r2\n\tadd\tstack-[8], r2, r2\n\tld\tr1, r1\n\tst.1\tr2, r1\n.BB0_53:\n\tadd\tr0, r0, r3\n\tadd\tr0, r0, r4\n.BB0_54:\n\tadd\tstack-[7], r0, r1\n\tld.1\tr1, r2\n\tsub!\tr2, r3, r1\n\tjump.le\t@.BB0_30\n\tor\t1, r3, r1\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB0_30\n\tadd\tr4, r0, stack-[9]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr3, r0, stack-[10]\n\tshl.s\t5, r3, r2\n\tadd\tstack-[6], r2, r2\n\tshl.s\t5, r1, r1\n\tadd\tstack-[6], r1, r1\n\tld.1\tr1, r1\n\tld.1\tr2, r2\n\tsub!\tr2, r1, r3\n\tadd\tr1, r0, r3\n\tadd.lt\tr2, r0, r3\n\tst.1\t0, r3\n\tadd.le\tr1, r0, r2\n\tst.1\t32, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r2\n\tld.1\tr2, r2\n\tadd\tstack-[9], r0, r4\n\tsub!\tr2, r4, r2\n\tadd\tstack-[11], r0, r8\n\tadd\tstack-[10], r0, r3\n\tjump.le\t@.BB0_30\n\tshl.s\t5, r4, r2\n\tadd\tr2, r8, r2\n\tld\tr1, r1\n\tst.1\tr2, r1\n\tadd\t1, r4, r4\n\tadd\t2, r3, r3\n\tsub.s!\tstack-[5], r3, r1\n\tjump.lt\t@.BB0_54\n\tadd\tstack-[8], r0, r3\n\tld.1\tr3, r1\n\tsub.s!\t1, r1, r2\n\tadd\tr8, r0, stack-[6]\n\tadd\tr3, r0, stack-[7]\n\tjump.gt\t@.BB0_33\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_31\n.BB0_30:\n\tadd\t@CPI0_23[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_24[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_92:\n\tadd\tr2, r0, r4\n\tadd\t1, r4, r2\n.BB0_95:\n\tshl.s\t5, r2, r4\n\tadd\t63, r4, r5\n\tand\t@CPI0_12[0], r5, r6\n\tld.1\t64, r9\n\tadd\tr6, r9, r5\n\tsub!\tr5, r6, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_11[0], r5, r7\n\tjump.gt\t@.BB0_17\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_17\n\tst.1\t64, r5\n\tst.1.inc\tr9, r2, r10\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r4\n\tjump.eq\t@.BB0_158\n\tptr.add\tr1, r3, r1\n\tadd\tr0, r0, r3\n.BB0_99:\n\tshl.s\t5, r3, r5\n\tadd\tr10, r5, r6\n\tptr.add\tr1, r5, r5\n\tld\tr5, r5\n\tst.1\tr6, r5\n\tadd\t1, r3, r3\n\tsub!\tr3, r4, r5\n\tjump.lt\t@.BB0_99\n.BB0_158:\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB0_101\n.BB0_101:\n\tld.1\t128, r1\n\tsub.s!\t2, r1, r2\n\tadd\tr9, r0, stack-[4]\n\tjump.lt\t@.BB0_103\n\tadd\t128, r0, stack-[8]\n\tadd\tr0, r0, stack-[2]\n\tadd\tr10, r0, stack-[3]\n\tjump\t@.BB0_107\n.BB0_136:\n\tadd\tstack-[1], r0, r8\n\tshr.s\t1, r8, r8\n\tadd\tstack-[2], r0, r1\n\tadd\t1, r1, stack-[2]\n\tadd\tstack-[9], r0, r3\n\tld.1\tr3, r1\n\tsub.s!\t1, r1, r2\n\tadd\tr3, r0, stack-[8]\n\tjump.le\t@.BB0_103\n.BB0_107:\n\tand!\t1, r8, r2\n\tadd\tr8, r0, stack-[1]\n\tjump.ne\t@.BB0_141\n\tadd\t1, r8, r2\n\tsub!\tr2, r1, r3\n\tjump.ne\t@.BB0_138\n\tld.1\tr9, r1\n\tsub.s!\tstack-[2], r1, r1\n\tadd\tr0, r0, r1\n\tjump.gt\t@.BB0_109\n\tjump\t@.BB0_30\n.BB0_141:\n\tsub.s\t1, r8, r2\n.BB0_138:\n\tsub!\tr1, r2, r1\n\tjump.le\t@.BB0_30\n\tld.1\tr9, r1\n\tsub.s!\tstack-[2], r1, r1\n\tjump.le\t@.BB0_30\n\tshl.s\t5, r2, r1\n\tadd\tstack-[8], r1, r1\n\tadd\t32, r1, r1\n\tld.1\tr1, r1\n.BB0_109:\n\tadd\tstack-[2], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\tr2, r10, r2\n\tst.1\tr2, r1\n\tadd\tstack-[8], r0, r1\n\tld.1\tr1, r1\n\tshr.s\t1, r1, r3\n\tand!\t1, r1, r2\n\tjump.ne\t@.BB0_120\n\tsub.s!\t@CPI0_17[0], r1, r2\n\tjump.gt\t@.BB0_17\n\tshl.s\t5, r3, r2\n\tadd\t63, r2, r4\n\tand\t@CPI0_12[0], r4, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tadd\tr5, r0, stack-[9]\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_11[0], r4, r6\n\tjump.gt\t@.BB0_17\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_17\n\tst.1\t64, r4\n\tadd\tstack-[9], r0, r4\n\tst.1.inc\tr4, r3, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_156\n\tadd\tstack[@calldatasize], r0, r5\n\tptr.add\tstack[@ptr_calldata], r5, r5\n\tadd\tr0, r0, r6\n.BB0_117:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_117\n.BB0_156:\n\tand!\t31, r2, r2\n\tjump.eq\t@.BB0_119\n.BB0_119:\n\tsub.s\t1, r1, r4\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_111\n\tjump\t@.BB0_136\n.BB0_120:\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.gt\t@.BB0_17\n\tadd\t1, r3, r3\n\tshl.s\t5, r3, r2\n\tadd\t63, r2, r4\n\tand\t@CPI0_12[0], r4, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tadd\tr5, r0, stack-[9]\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_11[0], r4, r6\n\tjump.gt\t@.BB0_17\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_17\n\tst.1\t64, r4\n\tadd\tstack-[9], r0, r4\n\tst.1.inc\tr4, r3, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_157\n\tadd\tstack[@calldatasize], r0, r5\n\tptr.add\tstack[@ptr_calldata], r5, r5\n\tadd\tr0, r0, r6\n.BB0_125:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_125\n.BB0_157:\n\tand!\t31, r2, r2\n\tjump.eq\t@.BB0_127\n.BB0_127:\n\tsub.s\t1, r1, r2\n\tadd\tstack-[8], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r2, r1\n\tjump.le\t@.BB0_30\n\tadd\tr2, r0, stack-[7]\n\tshl.s\t5, r2, r1\n\tadd\tstack-[8], r1, r1\n\tadd\t32, r1, r1\n\tld.1\tr1, r1\n\tst.1\t0, r0\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r3\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[3], r0, r10\n\tadd\tstack-[7], r0, r4\n\tjump.eq\t@.BB0_30\n\tshl.s\t5, r2, r2\n\tadd\tstack-[9], r2, r2\n\tld\tr1, r1\n\tst.1\tr2, r1\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB0_136\n.BB0_111:\n\tadd\tstack-[9], r0, r1\n\tadd\t32, r1, stack-[5]\n\tadd\tstack-[8], r0, r1\n\tadd\t32, r1, stack-[6]\n\tadd\tr0, r0, r5\n\tadd\tr0, r0, r6\n\tadd\tr4, r0, stack-[7]\n.BB0_131:\n\tadd\tstack-[8], r0, r1\n\tld.1\tr1, r2\n\tsub!\tr2, r5, r1\n\tjump.le\t@.BB0_30\n\tor\t1, r5, r1\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB0_30\n\tadd\tr6, r0, stack-[10]\n\tadd\tr5, r0, stack-[11]\n\tshl.s\t5, r5, r2\n\tadd\tstack-[6], r2, r2\n\tshl.s\t5, r1, r1\n\tadd\tstack-[6], r1, r1\n\tld.1\tr1, r1\n\tld.1\tr2, r2\n\tsub!\tr2, r1, r3\n\tadd\tr1, r0, r3\n\tadd.lt\tr2, r0, r3\n\tst.1\t0, r3\n\tadd.le\tr1, r0, r2\n\tst.1\t32, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r2\n\tld.1\tr2, r2\n\tadd\tstack-[10], r0, r6\n\tsub!\tr2, r6, r2\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[3], r0, r10\n\tadd\tstack-[7], r0, r4\n\tadd\tstack-[11], r0, r5\n\tjump.le\t@.BB0_30\n\tshl.s\t5, r6, r2\n\tadd\tstack-[5], r2, r2\n\tld\tr1, r1\n\tst.1\tr2, r1\n\tadd\t1, r6, r6\n\tadd\t2, r5, r5\n\tsub!\tr5, r4, r1\n\tjump.lt\t@.BB0_131\n\tjump\t@.BB0_136\n.BB0_103:\n\tld.1\t64, r1\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r2\n\tld.1\tr9, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB0_106\n\tadd\tr0, r0, r4\n\tadd\tstack-[4], r0, r6\n.BB0_105:\n\tadd\t32, r6, r6\n\tld.1\tr6, r5\n\tst.1.inc\tr2, r5, r2\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_105\n.BB0_106:\n\tsub\tr2, r1, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tld.1\tr8, r1\n\tjump\t@.BB0_32\n.func_end0:\n\nfun_hashLeafPairs:\n.func_begin1:\n\tsub!\tr1, r2, r3\n\tadd\tr2, r0, r3\n\tadd.lt\tr1, r0, r3\n\tst.1\t0, r3\n\tadd.le\tr2, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI1_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_1\n\tld\tr1, r1\n\tret\n.BB1_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nfun_log2ceilBitMagic:\n.func_begin2:\n\tadd\tr1, r0, r2\n\tsub.s!\t1, r2, r1\n\tadd\tr0, r0, r1\n\tjump.le\t@.BB2_1\n\tshr.s\t128, r2, r1\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.le\tr2, r0, r1\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd\t0, r0, r3\n\tadd.gt\t128, r0, r3\n\tor\t64, r3, r4\n\tsub.s!\t@CPI2_1[0], r1, r5\n\tadd.le\tr3, r0, r4\n\tshr.s\t64, r1, r3\n\tsub.s!\t@CPI2_1[0], r1, r5\n\tadd.le\tr1, r0, r3\n\tor\t32, r4, r5\n\tsub.s!\t@CPI2_2[0], r3, r1\n\tadd.le\tr4, r0, r5\n\tshr.s\t32, r3, r4\n\tsub.s!\t@CPI2_2[0], r3, r1\n\tadd.le\tr3, r0, r4\n\tor\t16, r5, r1\n\tsub.s!\t65535, r4, r3\n\tadd.le\tr5, r0, r1\n\tshr.s\t16, r4, r3\n\tadd.le\tr4, r0, r3\n\tsub.s\t1, r2, r4\n\tand\tr2, r4, r2\n\tsub.s!\t255, r3, r4\n\tadd.gt\t8, r1, r1\n\tshr.s\t8, r3, r4\n\tadd.le\tr3, r0, r4\n\tsub.s!\t15, r4, r3\n\tadd.gt\t4, r1, r1\n\tshr.s\t4, r4, r3\n\tadd.le\tr4, r0, r3\n\tsub.s!\t3, r3, r4\n\tadd.gt\t2, r1, r1\n\tshr.s\t2, r3, r4\n\tadd.le\tr3, r0, r4\n\tsub.s!\t1, r4, r3\n\tadd.gt\t1, r1, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB2_5\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB2_4\n.BB2_1:\n\tret\n.BB2_4:\n\tadd\tr0, r0, r1\n.BB2_5:\n\tadd\t1, r1, r1\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI2_2:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3473328054\nCPI0_3:\n\t.cell 3473328055\nCPI0_4:\n\t.cell 3709674905\nCPI0_5:\n\t.cell 3799863635\nCPI0_6:\n\t.cell 772331010\nCPI0_7:\n\t.cell 1477843522\nCPI0_8:\n\t.cell 3093389717\nCPI0_9:\n\t.cell 2535301202817642044428229017600\nCPI0_10:\n\t.cell 2535301200456458802993406410752\nCPI0_11:\nCPI2_1:\n\t.cell 18446744073709551615\nCPI0_12:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_13:\n\t.cell 18446744073709551487\nCPI0_14:\nCPI2_0:\n\t.cell 340282366920938463463374607431768211455\nCPI0_15:\n\t.cell 36893488147419103229\nCPI0_16:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_17:\n\t.cell 36893488147419103231\nCPI0_18:\n\t.cell 49028911419845585495659562575469425643168067122960582095550694317086860115968\nCPI0_19:\n\t.cell 54022109261364723879224836980641662553102086118181582999617056208987129406752\nCPI0_20:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_21:\n\t.cell 10458117451882892562347801444352\nCPI0_22:\n\t.cell 18446744073709551616\nCPI0_23:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_24:\n\t.cell 2852213850513516153367582212096\nCPI0_25:\n\t.cell 45855685850320781143181638381878916497866839588728100199558672319618188574720\nCPI0_26:\n\t.cell 54022109261364723879224836980641662553778663263923856664865257582919021830252\n","methodIdentifiers":{"getProof(bytes32[],uint256)":"b8616195","getRoot(bytes32[])":"2e08d602","hashLeafPairs(bytes32,bytes32)":"dd1d2599","log2ceil(uint256)":"e27d5153","log2ceilBitMagic(uint256)":"cf06c7b7","verifyProof(bytes32,bytes32[],bytes32)":"58161a42"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.9f2a5241\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"node\",\"type\":\"uint256\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"hashLeafPairs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2ceil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2ceilBitMagic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"valueToProve\",\"type\":\"bytes32\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dmfxyz\",\"details\":\"Note Generic Merkle Tree\",\"kind\":\"dev\",\"methods\":{\"log2ceil(uint256)\":{\"details\":\"Note that x is assumed > 0\"},\"log2ceilBitMagic(uint256)\":{\"details\":\"Note that x assumed > 1\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRoot(bytes32[])\":{\"notice\":\"PROOF GENERATION *\"},\"hashLeafPairs(bytes32,bytes32)\":{\"notice\":\"ascending sort and concat prior to hashing\"},\"log2ceilBitMagic(uint256)\":{\"notice\":\"Original bitmagic adapted from https://github.com/paulrberg/prb-math/blob/main/contracts/PRBMath.sol\"},\"verifyProof(bytes32,bytes32[],bytes32)\":{\"notice\":\"PROOF VERIFICATION *\"}},\"notice\":\"Nascent, simple, kinda efficient (and improving!) Merkle proof generator and verifier\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/murky/src/Merkle.sol\":\"Merkle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":murky/=lib/murky/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/murky/src/Merkle.sol\":{\"keccak256\":\"0xf16c4478189af9986c54a89f677515999323309bf89d3a6a78f69c838fbef3f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bece8626bafca241995c343d41f636e8f90069d8de824bbafc2425bffe4e19a1\",\"dweb:/ipfs/Qme7zczpDrMkqTUQAhpdhKEw8N6c7iLmn4a1CkFKbQc1aR\"]},\"lib/murky/src/common/MurkyBase.sol\":{\"keccak256\":\"0xac31f7f11285be1caf9f809635507f8e6749558a95e622b7e5d4ba803ee519b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4bf535ce7e9292c3560e427b49c44f4f9d2dd0a4caddd5efdc50d28b53e4163\",\"dweb:/ipfs/QmcLLUoVuV4xji6qDx5FEoc8LzVPCou7ZqUSyss21Dw1Wk\"]}},\"version\":1}","solc_version":"0.8.20","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 28:\"lib/murky/src/Merkle.sol\", 29:\"lib/murky/src/common/MurkyBase.sol\"\nobject \"Merkle_39715\" {\n    code {\n        {\n            /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Merkle_39715_deployed\")\n            codecopy(_1, dataoffset(\"Merkle_39715_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 28:\"lib/murky/src/Merkle.sol\", 29:\"lib/murky/src/common/MurkyBase.sol\"\n    object \"Merkle_39715_deployed\" {\n        code {\n            {\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(_1))\n                    case 0x2e08d602 {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(_1, _1) }\n                        let var_data_mpos := abi_decode_array_bytes32_dyn(add(4, offset), calldatasize())\n                        /// @src 29:1061:1062  \"1\"\n                        let _2 := 0x01\n                        /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                        if iszero(/** @src 29:1047:1062  \"data.length > 1\" */ gt(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:1047:1058  \"data.length\" */ var_data_mpos), /** @src 29:1061:1062  \"1\" */ _2))\n                        /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            mstore(add(memPtr, 36), 35)\n                            mstore(add(memPtr, 68), \"won't generate root for single l\")\n                            mstore(add(memPtr, 100), \"eaf\")\n                            revert(memPtr, 132)\n                        }\n                        /// @src 29:1112:1183  \"while (data.length > 1) {...\"\n                        for { }\n                        /** @src 29:1061:1062  \"1\" */ _2\n                        /// @src 29:1112:1183  \"while (data.length > 1) {...\"\n                        { }\n                        {\n                            /// @src 29:1119:1134  \"data.length > 1\"\n                            if iszero(gt(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:1119:1130  \"data.length\" */ var_data_mpos), /** @src 29:1061:1062  \"1\" */ _2))\n                            /// @src 29:1119:1134  \"data.length > 1\"\n                            { break }\n                            /// @src 29:1150:1172  \"data = hashLevel(data)\"\n                            var_data_mpos := /** @src 29:1157:1172  \"hashLevel(data)\" */ fun_hashLevel(var_data_mpos)\n                        }\n                        /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                        let _3 := mload(/** @src 29:1199:1206  \"data[0]\" */ memory_array_index_access_bytes32_dyn_2729(var_data_mpos))\n                        /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_bytes32(memPos, _3), memPos))\n                    }\n                    case 0x58161a42 { external_fun_verifyProof() }\n                    case 0xb8616195 { external_fun_getProof() }\n                    case 0xcf06c7b7 {\n                        external_fun_log2ceilBitMagic()\n                    }\n                    case 0xdd1d2599 { external_fun_hashLeafPairs() }\n                    case 0xe27d5153 { external_fun_log2ceil() }\n                }\n                revert(0, 0)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := mload(64)\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function array_allocation_size_array_bytes32_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := add(shl(5, length), 0x20)\n            }\n            function abi_decode_array_bytes32_dyn(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                let _2 := 0x20\n                let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n                let dst_1 := dst\n                mstore(dst, _1)\n                dst := add(dst, _2)\n                let srcEnd := add(add(offset, shl(5, _1)), _2)\n                if gt(srcEnd, end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let src := add(offset, _2)\n                for { } lt(src, srcEnd) { src := add(src, _2) }\n                {\n                    mstore(dst, calldataload(src))\n                    dst := add(dst, _2)\n                }\n                array := dst_1\n            }\n            function abi_encode_bytes32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, iszero(iszero(value0)))\n            }\n            function external_fun_verifyProof()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 96)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let offset := calldataload(36)\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let value1 := abi_decode_array_bytes32_dyn(add(4, offset), calldatasize())\n                /// @src 29:610:644  \"bytes32 rollingHash = valueToProve\"\n                let var_rollingHash := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ calldataload(68)\n                /// @src 29:671:683  \"proof.length\"\n                let expr := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:671:683  \"proof.length\" */ value1)\n                /// @src 29:722:735  \"uint256 i = 0\"\n                let var_i := /** @src -1:-1:-1 */ 0\n                /// @src 29:717:837  \"for (uint256 i = 0; i < length; ++i) {...\"\n                for { }\n                /** @src 29:737:747  \"i < length\" */ lt(var_i, expr)\n                /// @src 29:722:735  \"uint256 i = 0\"\n                {\n                    /// @src 29:749:752  \"++i\"\n                    var_i := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:749:752  \"++i\" */ var_i, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ 1)\n                }\n                /// @src 29:749:752  \"++i\"\n                {\n                    /// @src 29:772:822  \"rollingHash = hashLeafPairs(rollingHash, proof[i])\"\n                    var_rollingHash := /** @src 29:786:822  \"hashLeafPairs(rollingHash, proof[i])\" */ fun_hashLeafPairs(var_rollingHash, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:813:821  \"proof[i]\" */ memory_array_index_access_bytes32_dyn(value1, var_i)))\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_bool(memPos, /** @src 29:863:882  \"root == rollingHash\" */ eq(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ calldataload(4), /** @src 29:863:882  \"root == rollingHash\" */ var_rollingHash)), /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ memPos))\n            }\n            function abi_encode_array_bytes32_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, mload(srcPtr))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function external_fun_getProof()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let offset := calldataload(4)\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let value0 := abi_decode_array_bytes32_dyn(add(4, offset), calldatasize())\n                let var_data_mpos := value0\n                let var_node := calldataload(36)\n                /// @src 29:1353:1354  \"1\"\n                let _1 := 0x01\n                /// @src 29:1331:1395  \"require(data.length > 1, \\\"won't generate proof for single leaf\\\")\"\n                require_helper_stringliteral_65df(/** @src 29:1339:1354  \"data.length > 1\" */ gt(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:1339:1350  \"data.length\" */ value0), /** @src 29:1353:1354  \"1\" */ _1))\n                /// @src 29:1507:1551  \"new bytes32[](log2ceilBitMagic(data.length))\"\n                let expr_mpos := allocate_and_zero_memory_array_array_bytes32_dyn(/** @src 29:1521:1550  \"log2ceilBitMagic(data.length)\" */ fun_log2ceilBitMagic(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:1538:1549  \"data.length\" */ value0)))\n                /// @src 29:1561:1576  \"uint256 pos = 0\"\n                let var_pos := /** @src -1:-1:-1 */ 0\n                /// @src 29:1561:1576  \"uint256 pos = 0\"\n                let var_pos_1 := /** @src -1:-1:-1 */ var_pos\n                /// @src 29:1887:2328  \"while (data.length > 1) {...\"\n                for { }\n                /** @src 29:1353:1354  \"1\" */ _1\n                /// @src 29:1887:2328  \"while (data.length > 1) {...\"\n                { }\n                {\n                    /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                    let _2 := mload(/** @src 29:1894:1905  \"data.length\" */ var_data_mpos)\n                    /// @src 29:1894:1909  \"data.length > 1\"\n                    if iszero(gt(_2, /** @src 29:1353:1354  \"1\" */ _1))\n                    /// @src 29:1894:1909  \"data.length > 1\"\n                    { break }\n                    /// @src 29:1953:2218  \"if (node & 0x1 == 1) {...\"\n                    switch /** @src 29:1957:1972  \"node & 0x1 == 1\" */ eq(/** @src 29:1957:1967  \"node & 0x1\" */ and(var_node, /** @src 29:1353:1354  \"1\" */ _1), _1)\n                    case /** @src 29:1953:2218  \"if (node & 0x1 == 1) {...\" */ 0 {\n                        /// @src 29:2053:2061  \"node + 1\"\n                        let expr := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:2053:2061  \"node + 1\" */ var_node, /** @src 29:1353:1354  \"1\" */ _1)\n                        /// @src 29:2049:2218  \"if (node + 1 == data.length) {...\"\n                        switch /** @src 29:2053:2076  \"node + 1 == data.length\" */ eq(expr, _2)\n                        case /** @src 29:2049:2218  \"if (node + 1 == data.length) {...\" */ 0 {\n                            /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                            mstore(/** @src 29:2171:2199  \"result[pos] = data[node + 1]\" */ memory_array_index_access_bytes32_dyn(expr_mpos, var_pos_1), /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:2185:2199  \"data[node + 1]\" */ memory_array_index_access_bytes32_dyn(var_data_mpos, expr)))\n                        }\n                        default /// @src 29:2049:2218  \"if (node + 1 == data.length) {...\"\n                        {\n                            /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                            mstore(/** @src 29:2100:2124  \"result[pos] = bytes32(0)\" */ memory_array_index_access_bytes32_dyn(expr_mpos, var_pos_1), /** @src -1:-1:-1 */ var_pos)\n                        }\n                    }\n                    default /// @src 29:1953:2218  \"if (node & 0x1 == 1) {...\"\n                    {\n                        /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                        mstore(/** @src 29:1996:2024  \"result[pos] = data[node - 1]\" */ memory_array_index_access_bytes32_dyn(expr_mpos, var_pos_1), /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:2010:2024  \"data[node - 1]\" */ memory_array_index_access_bytes32_dyn(var_data_mpos, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:2015:2023  \"node - 1\" */ var_node, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ not(0)))))\n                    }\n                    /// @src 29:2235:2240  \"++pos\"\n                    var_pos_1 := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:2235:2240  \"++pos\" */ var_pos_1, /** @src 29:1353:1354  \"1\" */ _1)\n                    /// @src 29:2258:2267  \"node /= 2\"\n                    var_node := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(/** @src 29:1353:1354  \"1\" */ _1, /** @src 29:2258:2267  \"node /= 2\" */ var_node)\n                    /// @src 29:2295:2317  \"data = hashLevel(data)\"\n                    var_data_mpos := /** @src 29:2302:2317  \"hashLevel(data)\" */ fun_hashLevel(var_data_mpos)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_bytes32_dyn(memPos, expr_mpos), memPos))\n            }\n            function external_fun_log2ceilBitMagic()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let ret := fun_log2ceilBitMagic(calldataload(4))\n                let memPos := mload(64)\n                mstore(memPos, ret)\n                return(memPos, 32)\n            }\n            function external_fun_hashLeafPairs()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let ret := fun_hashLeafPairs(calldataload(4), calldataload(36))\n                let memPos := mload(64)\n                mstore(memPos, ret)\n                return(memPos, 32)\n            }\n            function external_fun_log2ceil()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let var_x := calldataload(4)\n                let var_x_1 := var_x\n                /// @src 29:3612:3628  \"uint256 ceil = 0\"\n                let var_ceil := /** @src -1:-1:-1 */ 0\n                /// @src 29:3875:4644  \"assembly {...\"\n                let _1 := 1\n                /// @src 29:4804:4882  \"while (x > 0) {...\"\n                for { }\n                /** @src 29:4811:4816  \"x > 0\" */ var_x\n                /// @src 29:4804:4882  \"while (x > 0) {...\"\n                { }\n                {\n                    /// @src 29:4836:4843  \"x >>= 1\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(/** @src 29:3875:4644  \"assembly {...\" */ _1, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ var_x)\n                    /// @src 29:4861:4867  \"ceil++\"\n                    var_ceil := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:4861:4867  \"ceil++\" */ var_ceil, /** @src 29:3875:4644  \"assembly {...\" */ _1)\n                }\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                let memPos := mload(64)\n                mstore(memPos, sub(/** @src 29:4895:4907  \"ceil -= pOf2\" */ var_ceil, /** @src 29:3875:4644  \"assembly {...\" */ eq(and(add(not(var_x_1), _1), var_x_1), var_x_1)))\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                return(memPos, 32)\n            }\n            /// @ast-id 39714 @src 28:385:806  \"function hashLeafPairs(bytes32 left, bytes32 right) public pure override returns (bytes32 _hash) {...\"\n            function fun_hashLeafPairs(var_left, var_right) -> var_hash\n            {\n                /// @src 28:492:800  \"assembly {...\"\n                switch lt(var_left, var_right)\n                case 0 {\n                    mstore(0x0, var_right)\n                    mstore(0x20, var_left)\n                }\n                default {\n                    mstore(0x0, var_left)\n                    mstore(0x20, var_right)\n                }\n                var_hash := keccak256(0x0, 0x40)\n            }\n            /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n            function memory_array_index_access_bytes32_dyn_2729(baseRef) -> addr\n            {\n                if iszero(mload(baseRef))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, 32)\n            }\n            function memory_array_index_access_bytes32_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function require_helper_stringliteral_65df(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 36)\n                    mstore(add(memPtr, 68), \"won't generate proof for single \")\n                    mstore(add(memPtr, 100), \"leaf\")\n                    revert(memPtr, 132)\n                }\n            }\n            function allocate_and_zero_memory_array_array_bytes32_dyn(length) -> memPtr\n            {\n                let memPtr_1 := allocate_memory(array_allocation_size_array_bytes32_dyn(length))\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, 32), calldatasize(), add(array_allocation_size_array_bytes32_dyn(length), not(31)))\n            }\n            /// @ast-id 40031 @src 29:2436:3441  \"function hashLevel(bytes32[] memory data) private pure returns (bytes32[] memory) {...\"\n            function fun_hashLevel(var_data_mpos) -> var_mpos\n            {\n                /// @src 29:2528:2551  \"bytes32[] memory result\"\n                let var_result_mpos := /** @src -1:-1:-1 */ 0\n                /// @src 29:2837:2848  \"data.length\"\n                let expr := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:2837:2848  \"data.length\" */ var_data_mpos)\n                /// @src 29:2875:2878  \"0x1\"\n                let _1 := 0x01\n                /// @src 29:2862:3118  \"if (length & 0x1 == 1) {...\"\n                switch /** @src 29:2866:2883  \"length & 0x1 == 1\" */ eq(/** @src 29:2866:2878  \"length & 0x1\" */ and(expr, /** @src 29:2875:2878  \"0x1\" */ _1), _1)\n                case /** @src 29:2862:3118  \"if (length & 0x1 == 1) {...\" */ 0 {\n                    /// @src 29:3069:3103  \"result = new bytes32[](length / 2)\"\n                    var_result_mpos := /** @src 29:3078:3103  \"new bytes32[](length / 2)\" */ allocate_and_zero_memory_array_array_bytes32_dyn(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(/** @src 29:2875:2878  \"0x1\" */ _1, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ expr))\n                }\n                default /// @src 29:2862:3118  \"if (length & 0x1 == 1) {...\"\n                {\n                    /// @src 29:2903:2941  \"result = new bytes32[](length / 2 + 1)\"\n                    var_result_mpos := /** @src 29:2912:2941  \"new bytes32[](length / 2 + 1)\" */ allocate_and_zero_memory_array_array_bytes32_dyn(/** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(shr(/** @src 29:2875:2878  \"0x1\" */ _1, /** @src 29:2926:2936  \"length / 2\" */ expr), /** @src 29:2875:2878  \"0x1\" */ _1))\n                    /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                    let _2 := not(0)\n                    let _3 := mload(/** @src 29:3001:3017  \"data[length - 1]\" */ memory_array_index_access_bytes32_dyn(var_data_mpos, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:3006:3016  \"length - 1\" */ expr, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ _2)))\n                    /// @src 28:492:800  \"assembly {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, 0)\n                    /// @src 28:492:800  \"assembly {...\"\n                    mstore(0x20, _3)\n                    /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                    mstore(/** @src 29:2959:3030  \"result[result.length - 1] = hashLeafPairs(data[length - 1], bytes32(0))\" */ memory_array_index_access_bytes32_dyn(var_result_mpos, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(mload(/** @src 29:2966:2979  \"result.length\" */ var_result_mpos), /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ _2)), /** @src 28:492:800  \"assembly {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 28:492:800  \"assembly {...\" */ 0x40))\n                }\n                /// @src 29:3224:3239  \"uint256 pos = 0\"\n                let var_pos := /** @src -1:-1:-1 */ 0\n                /// @src 29:3258:3271  \"uint256 i = 0\"\n                let var_i := /** @src -1:-1:-1 */ var_pos\n                /// @src 29:3273:3287  \"i < length - 1\"\n                let _4 := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:3277:3287  \"length - 1\" */ expr, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ not(0))\n                /// @src 29:3253:3402  \"for (uint256 i = 0; i < length - 1; i += 2) {...\"\n                for { }\n                /** @src 29:3273:3287  \"i < length - 1\" */ lt(var_i, _4)\n                /// @src 29:3258:3271  \"uint256 i = 0\"\n                {\n                    /// @src 29:3289:3295  \"i += 2\"\n                    var_i := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:3289:3295  \"i += 2\" */ var_i, /** @src 29:3294:3295  \"2\" */ 0x02)\n                }\n                /// @src 29:3289:3295  \"i += 2\"\n                {\n                    /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                    let _5 := mload(/** @src 29:3343:3350  \"data[i]\" */ memory_array_index_access_bytes32_dyn(var_data_mpos, var_i))\n                    /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                    mstore(/** @src 29:3315:3364  \"result[pos] = hashLeafPairs(data[i], data[i + 1])\" */ memory_array_index_access_bytes32_dyn(var_result_mpos, var_pos), /** @src 29:3329:3364  \"hashLeafPairs(data[i], data[i + 1])\" */ fun_hashLeafPairs(_5, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ mload(/** @src 29:3352:3363  \"data[i + 1]\" */ memory_array_index_access_bytes32_dyn(var_data_mpos, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:3357:3362  \"i + 1\" */ var_i, /** @src 29:2875:2878  \"0x1\" */ _1)))))\n                    /// @src 29:3382:3387  \"++pos\"\n                    var_pos := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ add(/** @src 29:3382:3387  \"++pos\" */ var_pos, /** @src 29:2875:2878  \"0x1\" */ _1)\n                }\n                /// @src 29:3421:3434  \"return result\"\n                var_mpos := var_result_mpos\n            }\n            /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n            function checked_add_uint256(x) -> sum\n            {\n                sum := add(x, /** @src 29:5414:5416  \"64\" */ 0x40)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256_2748(x) -> sum\n            {\n                sum := add(x, /** @src 29:5497:5499  \"32\" */ 0x20)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256_2750(x) -> sum\n            {\n                sum := add(x, /** @src 29:5580:5582  \"16\" */ 0x10)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256_2752(x) -> sum\n            {\n                sum := add(x, /** @src 29:5662:5663  \"8\" */ 0x08)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256_2754(x) -> sum\n            {\n                sum := add(x, /** @src 29:5742:5743  \"4\" */ 0x04)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(/** @src 29:5742:5743  \"4\" */ 0x04, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256_2756(x) -> sum\n            {\n                sum := add(x, /** @src 29:5822:5823  \"2\" */ 0x02)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256_2757(x) -> sum\n            {\n                sum := add(x, /** @src 29:5196:5197  \"1\" */ 0x01)\n                /// @src 28:242:808  \"contract Merkle is MurkyBase {...\"\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @ast-id 40235 @src 29:5110:6079  \"function log2ceilBitMagic(uint256 x) public pure returns (uint256) {...\"\n            function fun_log2ceilBitMagic(var_x) -> var\n            {\n                /// @src 29:5187:5232  \"if (x <= 1) {...\"\n                if /** @src 29:5191:5197  \"x <= 1\" */ iszero(gt(var_x, /** @src 29:5196:5197  \"1\" */ 0x01))\n                /// @src 29:5187:5232  \"if (x <= 1) {...\"\n                {\n                    /// @src 29:5213:5221  \"return 0\"\n                    var := /** @src 29:5220:5221  \"0\" */ 0x00\n                    /// @src 29:5213:5221  \"return 0\"\n                    leave\n                }\n                /// @src 29:5241:5256  \"uint256 msb = 0\"\n                let var_msb := /** @src 29:5255:5256  \"0\" */ 0x00\n                /// @src 29:5266:5280  \"uint256 _x = x\"\n                let var_x_1 := var_x\n                /// @src 29:5290:5367  \"if (x >= 2 ** 128) {...\"\n                if /** @src 29:5294:5307  \"x >= 2 ** 128\" */ iszero(lt(var_x, /** @src 29:5299:5307  \"2 ** 128\" */ shl(128, /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ 1)))\n                /// @src 29:5290:5367  \"if (x >= 2 ** 128) {...\"\n                {\n                    /// @src 29:5323:5332  \"x >>= 128\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(128, /** @src 29:5323:5332  \"x >>= 128\" */ var_x)\n                    /// @src 29:5346:5356  \"msb += 128\"\n                    var_msb := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ 128\n                }\n                /// @src 29:5376:5450  \"if (x >= 2 ** 64) {...\"\n                if /** @src 29:5380:5392  \"x >= 2 ** 64\" */ iszero(lt(var_x, /** @src 29:5385:5392  \"2 ** 64\" */ 0x010000000000000000))\n                /// @src 29:5376:5450  \"if (x >= 2 ** 64) {...\"\n                {\n                    /// @src 29:5408:5416  \"x >>= 64\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(64, /** @src 29:5408:5416  \"x >>= 64\" */ var_x)\n                    /// @src 29:5430:5439  \"msb += 64\"\n                    var_msb := checked_add_uint256(var_msb)\n                }\n                /// @src 29:5459:5533  \"if (x >= 2 ** 32) {...\"\n                if /** @src 29:5463:5475  \"x >= 2 ** 32\" */ iszero(lt(var_x, /** @src 29:5468:5475  \"2 ** 32\" */ 0x0100000000))\n                /// @src 29:5459:5533  \"if (x >= 2 ** 32) {...\"\n                {\n                    /// @src 29:5491:5499  \"x >>= 32\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(32, /** @src 29:5491:5499  \"x >>= 32\" */ var_x)\n                    /// @src 29:5513:5522  \"msb += 32\"\n                    var_msb := checked_add_uint256_2748(var_msb)\n                }\n                /// @src 29:5542:5616  \"if (x >= 2 ** 16) {...\"\n                if /** @src 29:5546:5558  \"x >= 2 ** 16\" */ iszero(lt(var_x, /** @src 29:5551:5558  \"2 ** 16\" */ 0x010000))\n                /// @src 29:5542:5616  \"if (x >= 2 ** 16) {...\"\n                {\n                    /// @src 29:5574:5582  \"x >>= 16\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(16, /** @src 29:5574:5582  \"x >>= 16\" */ var_x)\n                    /// @src 29:5596:5605  \"msb += 16\"\n                    var_msb := checked_add_uint256_2750(var_msb)\n                }\n                /// @src 29:5625:5696  \"if (x >= 2 ** 8) {...\"\n                if /** @src 29:5629:5640  \"x >= 2 ** 8\" */ iszero(lt(var_x, /** @src 29:5634:5640  \"2 ** 8\" */ 0x0100))\n                /// @src 29:5625:5696  \"if (x >= 2 ** 8) {...\"\n                {\n                    /// @src 29:5656:5663  \"x >>= 8\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(8, /** @src 29:5656:5663  \"x >>= 8\" */ var_x)\n                    /// @src 29:5677:5685  \"msb += 8\"\n                    var_msb := checked_add_uint256_2752(var_msb)\n                }\n                /// @src 29:5705:5776  \"if (x >= 2 ** 4) {...\"\n                if /** @src 29:5709:5720  \"x >= 2 ** 4\" */ iszero(lt(var_x, /** @src 29:5714:5720  \"2 ** 4\" */ 0x10))\n                /// @src 29:5705:5776  \"if (x >= 2 ** 4) {...\"\n                {\n                    /// @src 29:5736:5743  \"x >>= 4\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(4, /** @src 29:5736:5743  \"x >>= 4\" */ var_x)\n                    /// @src 29:5757:5765  \"msb += 4\"\n                    var_msb := checked_add_uint256_2754(var_msb)\n                }\n                /// @src 29:5785:5856  \"if (x >= 2 ** 2) {...\"\n                if /** @src 29:5789:5800  \"x >= 2 ** 2\" */ iszero(lt(var_x, /** @src 29:5794:5800  \"2 ** 2\" */ 0x04))\n                /// @src 29:5785:5856  \"if (x >= 2 ** 2) {...\"\n                {\n                    /// @src 29:5816:5823  \"x >>= 2\"\n                    var_x := /** @src 28:242:808  \"contract Merkle is MurkyBase {...\" */ shr(2, /** @src 29:5816:5823  \"x >>= 2\" */ var_x)\n                    /// @src 29:5837:5845  \"msb += 2\"\n                    var_msb := checked_add_uint256_2756(var_msb)\n                }\n                /// @src 29:5865:5915  \"if (x >= 2 ** 1) {...\"\n                if /** @src 29:5869:5880  \"x >= 2 ** 1\" */ iszero(lt(var_x, /** @src 29:5874:5880  \"2 ** 1\" */ 0x02))\n                /// @src 29:5865:5915  \"if (x >= 2 ** 1) {...\"\n                {\n                    /// @src 29:5896:5904  \"msb += 1\"\n                    var_msb := checked_add_uint256_2757(var_msb)\n                }\n                /// @src 29:5967:5991  \"(lsb == _x) && (msb > 0)\"\n                let expr := /** @src 29:5968:5977  \"lsb == _x\" */ eq(/** @src 29:5939:5953  \"(~_x + 1) & _x\" */ and(/** @src 29:5940:5947  \"~_x + 1\" */ checked_add_uint256_2757(/** @src 29:5940:5943  \"~_x\" */ not(var_x_1)), /** @src 29:5939:5953  \"(~_x + 1) & _x\" */ var_x_1), /** @src 29:5968:5977  \"lsb == _x\" */ var_x_1)\n                /// @src 29:5967:5991  \"(lsb == _x) && (msb > 0)\"\n                if expr\n                {\n                    expr := /** @src 29:5983:5990  \"msb > 0\" */ iszero(iszero(var_msb))\n                }\n                /// @src 29:5963:6073  \"if ((lsb == _x) && (msb > 0)) {...\"\n                switch expr\n                case 0 {\n                    /// @src 29:6048:6062  \"return msb + 1\"\n                    var := /** @src 29:6055:6062  \"msb + 1\" */ checked_add_uint256_2757(var_msb)\n                    /// @src 29:6048:6062  \"return msb + 1\"\n                    leave\n                }\n                default /// @src 29:5963:6073  \"if ((lsb == _x) && (msb > 0)) {...\"\n                {\n                    /// @src 29:6007:6017  \"return msb\"\n                    var := var_msb\n                    leave\n                }\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000814000a\"\n    }\n}\n","hash":"010000f199f5a91ab01bfb6137acda6a89124837ce7aae39cd4037db7f192218","factoryDependencies":{},"id":28}